[build]
target = ["thumbv7em-none-eabihf"]
# target = ["thumbv7em-none-eabihf", "x86_64-unknown-linux-gnu"]

# probe-run
#[target.thumbv7em-none-eabihf]
# runner = "probe-rs run --chip STM32F407VGTx"

# default runner starts a GDB sesssion, which requires OpenOCD to be running, e.g. :
## openocd -f interface/stlink.cfg -f target/stm32f4x.cfg
# modify link to openocd.gdb base on where to execute cargo run
[target.thumbv7em-none-eabihf]
# runner = "arm-none-eabi-gdb -q -x ../openocd.gdb"
runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x ../openocd.gdb"

# [target.'cfg(all(target_arch = "arm", target_os = "none"))']
# runner = "probe-run --chip STM32F407VGTx"
rustflags = [
    # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
    # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
    "-C",
    # "link-arg=--nmagic",
    # LLD (shipped with the Rust toolchain) is used as the default linker
    "link-arg=-Tlink.x",
]
