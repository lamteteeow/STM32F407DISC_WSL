The ITM protocol works with frames (~ Ethernet frames). Each frame has a header and a variable length payload.
OpenOCD will receive these frames and write them directly to a file without parsing them.
So, if the microntroller sends the string "Hello, world!" using the iprintln macro, OpenOCD's output file won't exactly contain that string.

NOTE: It's very important that both "itmdump" and "openocd" are running from the same directory!

Tips:
    - enums & struct have different accessiblity with "pub". "pub" applies to all enums' children while struct not. 
    - directly using "use" applies for the same scope only.
    - enums is an example of Rust supporting Algebraic data types
    - "mod" is different than "include" from other languages. It is more "bidirectional" with the help of Cargo.
    - Layout of HAL in Rust:
                                         
                                         _ Micro-architecture Crate -> Microprocessor (ARM Cortex M4) => (cortex-m)
                                        /
                                       /
            Board Crate -> HAL Crate -{                            [STM32F407VG]
                                       \
                                        \_
                                           Peripheral Access Crate (PAC) -> ADC, GPIO, Memory, I2C, SPI, USB, ... => (stm32f407g_disc)


    - By default: cargo build will create bin in <project>/target/<target>/debug [first target is emulator system, here is Linux (Ubuntu WSL), not Windows]
    - By default: cargo build --manifest-path <path>, Cargo searches for the Cargo.toml file in the current directory or any PARENT directory.
    - Some important options: --target, --release, --examples/--example <example>, --tests/--test <test>, --bins/--bin <bin>, --lib